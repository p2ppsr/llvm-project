# Autogenerated from /Users/tyeverett/projects/llvm-project/clang/test/lit.site.cfg.py.in
# Do not edit!

# Allow generated file to be relocatable.
import os
import platform
def path(p):
    if not p: return ''
    # Follows lit.util.abs_path_preserve_drive, which cannot be imported here.
    if platform.system() == 'Windows':
        return os.path.abspath(os.path.join(os.path.dirname(__file__), p))
    else:
        return os.path.realpath(os.path.join(os.path.dirname(__file__), p))


import sys

config.llvm_src_root = path(r"../../../../llvm")
config.llvm_obj_root = path(r"../../..")
config.llvm_tools_dir = lit_config.substitute(path(r"../../../bin"))
config.llvm_libs_dir = lit_config.substitute(path(r"../../../lib"))
config.llvm_shlib_dir = lit_config.substitute(path(r"../../../lib"))
config.llvm_plugin_ext = ".dylib"
config.lit_tools_dir = path(r"")
config.errc_messages = "No such file or directory;Is a directory;Invalid argument;Permission denied"
config.clang_lit_site_cfg = __file__
config.clang_obj_root = path(r"..")
config.clang_src_dir = path(r"../../../../clang")
config.clang_tools_dir = lit_config.substitute(path(r"../../../bin"))
config.clang_lib_dir = path(r"../../../lib")
config.host_triple = "arm64-apple-darwin23.4.0"
config.target_triple = ""
config.host_cc = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc"
config.host_cxx = "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++"
config.llvm_use_sanitizer = ""
config.have_zlib = 1
config.have_zstd = 1
config.clang_arcmt = 1
config.clang_default_pie_on_linux = 1
config.clang_default_cxx_stdlib = ""
config.clang_staticanalyzer = 1
config.clang_staticanalyzer_z3 = 0
config.clang_enable_cir = 0
config.clang_examples = 0
config.enable_shared = 1
config.enable_backtrace = 1
config.enable_threads = 1
config.reverse_iteration = 0
config.host_arch = "arm64"
config.perl_executable = "/usr/bin/perl"
config.python_executable = "/opt/homebrew/Frameworks/Python.framework/Versions/3.12/bin/python3.12"
config.use_z3_solver = lit_config.params.get('USE_Z3_SOLVER', "")
config.has_plugins = 1
config.clang_vendor_uti = "org.llvm.clang"
config.llvm_external_lit = path(r"")
config.standalone_build = 0
config.ppc_linux_default_ieeelongdouble = 0
config.have_llvm_driver = 0
config.substitutions.append(("%llvm-version-major", "20"))

import lit.llvm
lit.llvm.initialize(lit_config, config)

# Let the main config do the real work.
lit_config.load_config(
    config, os.path.join(config.clang_src_dir, "test/lit.cfg.py"))
